<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>X</title>
  
  <subtitle>x</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-06T04:38:03.183Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>X</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>激活函数</title>
    <link href="http://yoursite.com/2020/02/06/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2020/02/06/激活函数/</id>
    <published>2020-02-05T18:32:07.000Z</published>
    <updated>2020-02-06T04:38:03.183Z</updated>
    
    <content type="html"><![CDATA[<p>借此机会把深度学习中常用的激活函数做一些总结。</p><h3 id="激活函数概念"><a href="#激活函数概念" class="headerlink" title="激活函数概念"></a>激活函数概念</h3><p>所谓激活函数（Activation Function），就是在人工神经网络的神经元上运行的函数，负责将神经元的输入映射到输出端。</p><h3 id="什么是激活函数"><a href="#什么是激活函数" class="headerlink" title="什么是激活函数"></a>什么是激活函数</h3><p>激活函数（Activation functions）对于人工神经网络模型去学习、理解非常复杂和非线性的函数来说具有十分重要的作用。它们将非线性特性引入到我们的网络中。神经元中，输入的 inputs 通过加权，求和后，还被作用了一个函数，这个函数就是激活函数。引入激活函数是为了增加神经网络模型的非线性。没有激活函数的每层都相当于矩阵相乘。就算你叠加了若干层之后，无非还是个矩阵相乘罢了。</p><h3 id="为什么使用激活函数"><a href="#为什么使用激活函数" class="headerlink" title="为什么使用激活函数"></a>为什么使用激活函数</h3><p>如果不用激活函数，每一层输出都是上层输入的线性函数，无论神经网络有多少层，输出都是输入的线性组合，这种情况就是最原始的感知机（Perceptron）。<br>如果使用的话，激活函数给神经元引入了非线性因素，使得神经网络可以任意逼近任何非线性函数，这样神经网络就可以应用到众多的非线性模型中。</p><h3 id="个人认知与理解"><a href="#个人认知与理解" class="headerlink" title="个人认知与理解"></a>个人认知与理解</h3><p>我觉得机器学习的传统算法与深度学习算法的比较重要的区别是：</p><ol><li>从广义上来讲，机器学习的传统算法一般只能使用一种目标模型函数，比如逻辑回归使用logistic函数、只能解决单维度问题；而深度学习可以在不同神经层使用不同或者多种激活函数、因此拥有多种或者不同函数的特性，所以解决问题具有多维度、线性、非线性等处理能力</li><li>深度学习的激活函数使得深度学习算法既能解决简单的线性问题、也能处理复杂的非线性问题</li><li>数据中的特征往往具有不同的特性、特征与不同模型之间也有较大的辨识差异，机器学习的传统算法的单一模型可能只能对部分特征产生重要作用，而深度学习的多种激活函数则比较全面、多维度对特征进行学习</li></ol><h3 id="常用的激活函数"><a href="#常用的激活函数" class="headerlink" title="常用的激活函数"></a>常用的激活函数</h3><ol><li>sigmoid 函数</li><li>tanh 函数</li><li>relu 函数</li><li>leaky relu 函数</li><li>elu 函数</li><li>softmax 函数</li></ol><h3 id="饱和激活函数与非饱和激活函数"><a href="#饱和激活函数与非饱和激活函数" class="headerlink" title="饱和激活函数与非饱和激活函数"></a>饱和激活函数与非饱和激活函数</h3><ol><li>饱和函数是指当自变量 x 达到某个值(或者说趋于无穷小、无穷大)的时候，因变量 y 就不再发生变化，而是趋于某一个固定的值</li></ol><ul><li>sigmoid 函数就是一个饱和激活函数，当自变量 z 趋于无穷小时，因变量 y 趋于 0；当自变量 z 趋于无穷大时，因变量 y 趋于 1</li><li>tanh 函数就是一个饱和激活函数，当自变量 z 趋于无穷小时，因变量 y 趋于 -1；当自变量 z 趋于无穷大时，因变量 y 趋于 1</li></ul><ol><li>饱和函数是指当自变量 x 达到某个值(或者说趋于无穷小、无穷大)的时候，因变量 y 就依然发生变化，并不是趋于某一个固定的值</li></ol><ul><li>relu 函数就是一个非饱和激活函数，当自变量 z 小于 0 时，因变量 y 等于 0；但当自变量 z 大于 0 时，因变量 y 是一个 z 的变化值</li><li>relu 的变种激活函数</li></ul><ol><li>非饱和激活函数的优势</li></ol><ul><li>首先，“非饱和激活函数”能解决所谓的“梯度消失”问题</li><li>其次，它能加快收敛速度<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">warnings.filterwarnings(<span class="string">'ignore'</span>)</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">-10</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-sigmoid激活函数-饱和函数"><a href="#1-sigmoid激活函数-饱和函数" class="headerlink" title="1.sigmoid激活函数(饱和函数)"></a>1.sigmoid激活函数(饱和函数)</h3><p>sigmoid函数计算公式<br>$<br>\sigma(z) =\frac{1}{1+e^{-z}},e\approx 2.7183<br>$<br>sigmoid函数的导数公式<br>$<br>{\sigma(z)}’ =\sigma(z)(1-\sigma(z)),e\approx 2.7183<br>$<br>sigmoid函数评价</p><ul><li>优点：sigmoid函数有效地将实数域的线性问题映射到[0,1]区间的类别概率问题，实现分类；</li><li>缺点：然而在深度学习算法中使用sigmoid函数有时候在反向求导传播时会导致梯度消失的现象：<br>当z很大时，$\sigma(z)$趋近于1，当z很小时，$\sigma(z)$趋近于0<br>其导数${\sigma(z)}’ =\sigma(z)(1-\sigma(z))$在z很大或很小时都会趋近于0，造成梯度消失的现象<h1 id="手写计算函数"><a href="#手写计算函数" class="headerlink" title="手写计算函数"></a>手写计算函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(z, mode=False)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> mode:  <span class="comment"># 手写公式</span></span><br><span class="line">        L = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(z)):</span><br><span class="line">            sigmoid_value = <span class="number">1</span>/(<span class="number">1</span>+(<span class="number">2.7183</span>)**(-z[i]))</span><br><span class="line">            L.append(sigmoid_value)</span><br><span class="line">        <span class="keyword">return</span> L</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 使用numpy</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span>+np.exp(-z))</span><br><span class="line">plt.plot(x, sigmoid(z=x))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 Tensorflow 的 sigmoid 函数</span></span><br><span class="line">y_sigmoid = tf.nn.sigmoid(x)</span><br><span class="line">plt.plot(x, y_sigmoid)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-tanh激活函数-饱和函数"><a href="#2-tanh激活函数-饱和函数" class="headerlink" title="2.tanh激活函数(饱和函数)"></a>2.tanh激活函数(饱和函数)</h3><p>tanh函数计算公式<br>$<br>tanh(z)=\frac{e^{z}-e^{-z}}{e^{z}+e^{-z}},e\approx 2.7183<br>$<br>tanh函数的导数公式<br>$<br>{tanh(z)}’=1-(tanh(z))^{2},e\approx 2.7183<br>$<br>tanh函数评价</p><ul><li>优点：sigmoid函数有效地将实数域的线性问题映射到[-1,1]区间的类别概率问题，实现分类；</li><li>缺点：然而在深度学习算法中使用tanh函数有时候在反向求导传播时会导致梯度消失的现象：<br>当z很大时，tanh(z)\tanh(z)tanh(z)趋近于1，当z很小时，tanh(z)tanh(z)tanh(z)趋近于-1<br>其导数 ${tanh(z)}’=1-(tanh(z))^{2}$在z很大或很小时都会趋近于0，造成梯度消失的现象<br>tanh与sigmoid的关系式：<br>$tanh(z)=2sigmoid(2z)-1$<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tanh</span><span class="params">(z, mode=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> mode:  <span class="comment"># 手写公式</span></span><br><span class="line">        L = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(z)):</span><br><span class="line">            exp1 = <span class="number">2.7183</span>**(z[i])</span><br><span class="line">            exp2 = <span class="number">2.7183</span>**(-z[i])</span><br><span class="line">            tanh_value = (exp1-exp2)/(exp1+exp2)</span><br><span class="line">            L.append(tanh_value)</span><br><span class="line">        <span class="keyword">return</span> L</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 使用numpy</span></span><br><span class="line">        <span class="keyword">return</span> (np.exp(x)-np.exp(-x))/(np.exp(x)+np.exp(-x))</span><br><span class="line">plt.plot(x,tanh(z=x))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 Tensorflow 的 tanh 函数</span></span><br><span class="line">y_tanh = tf.nn.tanh(x)</span><br><span class="line">plt.plot(x, y_tanh)</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-relu激活函数-非饱和函数"><a href="#3-relu激活函数-非饱和函数" class="headerlink" title="3.relu激活函数(非饱和函数)"></a>3.relu激活函数(非饱和函数)</h3><p>修正线性单元（Rectified linear unit，ReLU）</p><p>relu函数计算公式<br>$relu(z)=max(0,z)$<br>relu函数的导数公式<br>$<br>{relu(z)}’=\left\{\begin{matrix}1 &amp; z&gt; 0\ 0 &amp; z\leq 0\end{matrix}\right.<br>$<br>relu函数评价</p><ul><li>优点：<br>relu函数的非饱和性可以有效地解决梯度消失的问题，提供相对较宽的激活边界<br>relu函数是阈值函数，运算简单且快速，只需通过阈值判断就可以得到激活值，而sigmoid、tanh函数都需要计算指数，运算复杂<br>ReLU的单侧抑制(负梯度都为 0)提供了网络的稀疏表达能力</li><li>缺点：<br>relu(z)=max(0,z)relu(z)=max(0,z)relu(z)=max(0,z)会导致负梯度的神经元产生不可逆的死亡，也称为死亡神经元，由于负梯度值都为 0，在往后的运算中都将以 0 传播<br>如果学习率（Learning Rate）设置较大，会导致超过一定比例的神经元不可逆死亡，进而参数梯度无法更新，整个训练过程失败<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relu</span><span class="params">(x)</span>:</span>  <span class="comment"># 手写公式</span></span><br><span class="line">    relu_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">        relu_list.append(max(<span class="number">0</span>, x[i]))</span><br><span class="line">    <span class="keyword">return</span> relu_list</span><br><span class="line">plt.ylim(<span class="number">-1</span>,<span class="number">6</span>)</span><br><span class="line">plt.plot(x, relu(x))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 Tensorflow 的 relu 函数</span></span><br><span class="line">y_relu = tf.nn.relu(x)</span><br><span class="line">plt.ylim(<span class="number">-1</span>,<span class="number">6</span>)</span><br><span class="line">plt.plot(x, y_relu)</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-leaky-relu"><a href="#4-leaky-relu" class="headerlink" title="4.leaky relu"></a>4.leaky relu</h3><p>带泄露修正线性单元（Leaky ReLU）函数是经典（以及广泛使用的）的ReLu激活函数的变体，该函数输出对负值输入有很小的坡度，它旨在解决负梯度神经元死亡的问题。由于负梯度神经元导数总是不为零，这能减少静默神经元的出现，允许基于梯度的学习（虽然会很慢），解决了Relu函数进入负区间后神经元不学习的问题。</p><p>leaky relu 函数计算公式<br>$Lrelu(z)=max(0.1z,z),a&lt;1(a=0.1)$,其中a可以自定义</p><p>leaky relu 函数的导数公式<br>$<br>{Lrelu(z)}’=\left\{\begin{matrix}1 &amp; z&gt;0\ 0.1 &amp;z\leq 0 \end{matrix}\right.<br>$<br>leaky relu 函数评价</p><ul><li>优点：<br>旨在解决 relu 负梯度神经元死亡的问题，函数输出对负值输入有很小的坡度<br>解决了Relu函数进入负区间后神经元不学习的问题</li><li>缺点：<br>负梯度的 a 难以寻求合适的系数值，a 通常小于 1 且通常使用 a = 0.1<br>负梯度的 a 的选择和确定需要一定的经验或者做实验验证，相对麻烦一些<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leaky_rule</span><span class="params">(z)</span>:</span>  <span class="comment"># 手写公式</span></span><br><span class="line">    L = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(z)):</span><br><span class="line">        lrule_value = max(<span class="number">0.1</span>*z[i], z[i])</span><br><span class="line">        L.append(lrule_value)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line">plt.plot(x, leaky_rule(z=x))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 Tensorflow 的 leaky_relu 函数</span></span><br><span class="line">y_lrelu = tf.nn.leaky_relu(x)</span><br><span class="line">plt.plot(x, y_lrelu)</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-elu"><a href="#5-elu" class="headerlink" title="5.elu"></a>5.elu</h3><p>指数线性单元（Exponential Linear Units）</p><p>elu 函数计算公式<br>$elu(z)={za(ez−1)z≥0z&lt;0$,tensorflow中,a默认为1</p><p>elu 函数的导数公式<br>$<br>{elu(z)}’=\left\{\begin{matrix}1 &amp; z\leq 0\ ae^{z} &amp; z&lt;0\end{matrix}\right.<br>$<br>elu 函数评价</p><p>融合了sigmoid和ReLU，左侧具有软饱和性，右侧无饱和性。<br>右侧线性部分使得ELU能够缓解梯度消失，而左侧软饱能够让ELU对输入变化或噪声更鲁棒。<br>ELU的输出均值接近于零，所以收敛速度更快。<br>在 ImageNet上，不加 Batch Normalization 30 层以上的 ReLU 网络会无法收敛，PReLU网络在MSRA的Fan-in （caffe ）初始化下会发散，而 ELU 网络在Fan-in/Fan-out下都能收敛。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">elu</span><span class="params">(z, a=<span class="number">0.1</span>)</span>:</span>  <span class="comment"># 手写公式</span></span><br><span class="line">    L = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(z)):</span><br><span class="line">        <span class="keyword">if</span> z[i] &gt;= <span class="number">0</span>:</span><br><span class="line">            elu_value = z[i]</span><br><span class="line">            L.append(elu_value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            elu_value = a*(<span class="number">2.7183</span>**(z[i]) - <span class="number">1</span>)</span><br><span class="line">            L.append(elu_value)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line">plt.plot(x, elu(z=x, a=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 Tensorflow 的 elu 函数</span></span><br><span class="line">y_elu = tf.nn.elu(x)</span><br><span class="line">plt.plot(x, y_elu)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;借此机会把深度学习中常用的激活函数做一些总结。&lt;/p&gt;
&lt;h3 id=&quot;激活函数概念&quot;&gt;&lt;a href=&quot;#激活函数概念&quot; class=&quot;headerlink&quot; title=&quot;激活函数概念&quot;&gt;&lt;/a&gt;激活函数概念&lt;/h3&gt;&lt;p&gt;所谓激活函数（Activation Funct
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>tensorflow基础</title>
    <link href="http://yoursite.com/2020/02/03/tensorflow%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/02/03/tensorflow基础/</id>
    <published>2020-02-03T04:11:06.000Z</published>
    <updated>2020-02-06T04:11:56.931Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一部分：Tensorflow基础"><a href="#第一部分：Tensorflow基础" class="headerlink" title="第一部分：Tensorflow基础"></a>第一部分：Tensorflow基础</h2><h3 id="Tensors张量"><a href="#Tensors张量" class="headerlink" title="Tensors张量"></a>Tensors张量</h3><h4 id="常量constant"><a href="#常量constant" class="headerlink" title="常量constant:"></a>常量constant:</h4><p>‘’’python<br>x = tf.constant([[4,2],[9,5]])<br>print(x)</p><p>tf.Tensor(<br>[[4 2]<br> [9 5]], shape=(2, 2), dtype=int32)<br>‘’’</p><p>可以通过“.numpy()”来得到numpy array类型</p><p>‘’’python<br>x.numpy()</p><p>array([[4, 2],<br>       [9, 5]], dtype=int32)<br>‘’</p><p>像numpy一样，有shape和dtype属性</p><p>‘’’python<br>print(‘shape:’,x.shape)<br>print(‘dx.dtype)</p><p>(2, 2)</p><p><dtype: 'int32'=""><br>‘’’</dtype:></p><p>常用的产生常量的方法是tf.ones和tf.zeros就像numpy的np.ones``np.zeros</p><p>‘’’python<br>print(tf.ones(shape=(2,3)))<br>print(tf.zeros(shape=(3,2)))</p><p>tf.Tensor(<br>[[1. 1. 1.]<br> [1. 1. 1.]], shape=(2, 3), dtype=float32)<br>tf.Tensor(<br>[[0. 0.]<br> [0. 0.]<br> [0. 0.]], shape=(3, 2), dtype=float32)<br>‘’’</p><h3 id="随机数常量random-constant正态分布"><a href="#随机数常量random-constant正态分布" class="headerlink" title="随机数常量random constant正态分布"></a>随机数常量random constant正态分布</h3><p>‘’’python<br>tf.random.normal(shape=(2,2),mean=0,stddev=1.0)</p><tf.tensor: id="12," shape="(2," 2),="" dtype="float32," numpy="array([[-0.05229542," 0.64488363],="" [="" 0.37966082,="" 1.0098479="" ]],=""><h1 id="整数均匀分布"><a href="#整数均匀分布" class="headerlink" title="整数均匀分布"></a>整数均匀分布</h1><p>tf.random.uniform(shape=(2,2),minval=0,maxval=10,dtype=tf.int32)</p><p><tf.tensor: id="16," shape="(2," 2),="" dtype="int32," numpy="array([[6," 3],="" [8,="" 7]],=""><br>‘’’</tf.tensor:></p><h3 id="Variables变量"><a href="#Variables变量" class="headerlink" title="Variables变量"></a>Variables变量</h3><p>变量是一种特别的张量，用来存储可变数值，需要用一些值来初始化<br>‘’’pyhon<br>initial_value = tf.random.normal(shape=(2,2))<br>a = tf.Variable(initial_value)<br>print(a)</p><p><tf.variable 'variable:0'="" shape="(2," 2)="" dtype="float32," numpy="array([[" 0.07630513,="" -0.39769924],="" [-0.9712114="" ,="" -0.62955064]],=""><br>‘’’</tf.variable></p><p>可以通过assign(value)来赋值“=”，或assign_add(value)“+=”，或assign_sub(value)“-=”<br>‘’’python<br>new_value = tf.random.normal(shape=(2, 2))<br>a.assign(new_value)<br>for i in range(2):<br>    for j in range(2):<br>        assert a[i, j] == new_value[i, j]</p><p>added_value = tf.random.normal(shape=(2,2))<br>a.assign_add(added_value)<br>for i in range(2):<br>    for j in range(2):<br>        assert a[i,j] == new_value[i,j]+added_value[i,j]<br>‘’’</p><h3 id="Tensorflow数学运算"><a href="#Tensorflow数学运算" class="headerlink" title="Tensorflow数学运算"></a>Tensorflow数学运算</h3><p>可以像numpy那样做作运算，Tensorflow的不同时这些运算可以放到GPU或TPU上执行<br>‘’’python<br>a = tf.random.normal(shape=(2,2))<br>b = tf.random.normal(shape=(2,2))<br>c = a+b<br>d = tf.square(c)<br>e = tf.exp(c)<br>print(a)<br>print(b)<br>print(c)<br>print(d)<br>print(e)</p><p>tf.Tensor(<br>[[ 1.6862711 -1.4246397]<br> [-1.0287055 -1.3188182]], shape=(2, 2), dtype=float32)<br>tf.Tensor(<br>[[ 1.4519434  0.7635907]<br> [ 1.1213834 -1.4559215]], shape=(2, 2), dtype=float32)<br>tf.Tensor(<br>[[ 3.1382146  -0.661049  ]<br> [ 0.09267795 -2.7747397 ]], shape=(2, 2), dtype=float32)<br>tf.Tensor(<br>[[9.8483906e+00 4.3698579e-01]<br> [8.5892025e-03 7.6991806e+00]], shape=(2, 2), dtype=float32)<br>tf.Tensor(<br>[[23.062654    0.51630944]<br> [ 1.0971084   0.0623657 ]], shape=(2, 2), dtype=float32)<br>‘’’</p><h2 id="GradientTape计算梯度"><a href="#GradientTape计算梯度" class="headerlink" title="GradientTape计算梯度"></a>GradientTape计算梯度</h2><p>和numpy的另一个不同是，可以自动跟踪任何变量的梯度。<br>打开一个GradientTape,然后通过tape.watch()来跟踪变量<br>‘’’python<br>a = tf.random.normal(shape=(2,2))<br>b = tf.random.normal(shape=(2,2))<br>with tf.GradientTape() as tape:<br>    tape.watch(a)#开始记录所有有关a参与过的运算<br>    c = tf.sqrt(tf.square(a)+tf.square(b)) #变量a做一些运算</p><pre><code>#计算c对于a的梯度dc_da = tape.gradient(c,a)print(dc_da)</code></pre><p>tf.Tensor(<br>[[-0.53557533  0.87920487]<br> [ 0.24663754  0.4680054 ]], shape=(2, 2), dtype=float32)<br>‘’’</p><p>对于所有变量，默认状态下会跟踪计算并用来求梯度，所以不用使用tape.watch()<br>‘’’python<br>a = tf.Variable(a)<br>with tf.GradientTape() as tape:<br>    c = tf.sqrt(tf.square(a)+tf.square(b))<br>    dc_da = tape.gradient(c,a)<br>    print(dc_da)</p><p>tf.Tensor(<br>[[-0.53557533  0.87920487]<br> [ 0.24663754  0.4680054 ]], shape=(2, 2), dtype=float32)<br>‘’’<br>可以通过多开几个GradientTape来求高阶导数：<br>‘’’python<br>with tf.GradientTape() as outer_tape:<br>    with tf.GradientTape() as tape:<br>        c = tf.sqrt(tf.square(a)+tf.square(b))<br>        dc_da = tape.gradient(c,a)<br>    d2c_d2a = outer_tape.gradient(dc_da,a)<br>    print(d2c_d2a)</p><p>tf.Tensor(<br>[[0.54411626 0.33872807]<br> [1.5284648  0.5024241 ]], shape=(2, 2), dtype=float32)<br>‘’’</p></tf.tensor:>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一部分：Tensorflow基础&quot;&gt;&lt;a href=&quot;#第一部分：Tensorflow基础&quot; class=&quot;headerlink&quot; title=&quot;第一部分：Tensorflow基础&quot;&gt;&lt;/a&gt;第一部分：Tensorflow基础&lt;/h2&gt;&lt;h3 id=&quot;Tenso
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>二分法</title>
    <link href="http://yoursite.com/2020/01/01/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    <id>http://yoursite.com/2020/01/01/二分法/</id>
    <published>2019-12-31T16:12:16.000Z</published>
    <updated>2019-12-31T16:16:14.325Z</updated>
    
    <content type="html"><![CDATA[<p><em>2019年终记事：一年的经历那么多，回忆起来却短的不可想象。2019年的最后一篇博客，回想第一篇到现在，虽然一路上走走停停，但学习的脚步还在前进。短短二十年放弃的东西比一声叹息多多了，回头看来人生得要有一件能坚持下去的东西……新年的钟声带不走2019的遗憾，希望它能带来2020的希望。</em></p><hr><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote><p>在计算机科学中，二分搜索，也称为半间隔搜索，对数搜索，是一种搜索算法，用于查找排序数组中目标值的位置。二分搜索将目标值与数组的中间元素进行比较。<br>如果它们不相等，则消除目标不能位于其中的那一半，并在剩余的一半上继续搜索，再次将中间元素与目标值进行比较，并重复此过程直到找到目标值。<br>如果搜索以其余一半为空结束，则目标不在数组中。<br>在最坏的情况下，二分搜索会以对数时间运行，进行$O(\log_{}n)$比较，其中${n}$是数组中元素的数量，${O}$是Big O表示法， 而${\log}$是对数。 除了小数组以外，二分搜索比线性搜索快。 但是，必须首先对数组进行排序才能应用二进制搜索。有专门为快速搜索而设计的专用数据结构，例如哈希表，可以比二进制搜索更有效地进行搜索。 但是，二分搜索可用于解决更广泛的问题，例如，即使数组中不存在目标，也要在数组中找到相对于目标而言第二小的元素。<br>二进制搜索树和B树数据结构基于二分搜索。<br>——wiki</p></blockquote><p>在leetcode刷题时我们总能遇到可以利用二分搜索解决的问题，但往往我们写得出来的二分搜索代码并不能work或者潜藏有bug。造成这种现象的原因是纷杂的情况导致算法的细节处理不同而容易忽视边界的细节问题。我们需要一个简洁明了的思路来将问题一般化。矛盾的特殊性应该包含在矛盾的一般性当中，用高度抽象化的过程对具体问题降维打击。</p><p>编写博客时翻阅了不少leetcode中的二分题解，在此借鉴并总结一下。在完成的过程中翻阅了《计算机程序设计艺术》的相关章节，受益颇多，一部分内容会穿插在文中讲述。</p><h2 id="入题"><a href="#入题" class="headerlink" title="入题"></a>入题</h2><p><strong>一些背景——</strong></p><p>《计算机程序设计艺术》的作者 Donald Knuth：</p><blockquote><p>Although the basic idea of binary search is comparatively straightforward, the details can be surprisingly tricky …</p></blockquote><p>译：“虽然二分搜索的基本思想很直白，但细节出奇的难以应对…”</p><p>他在《计算机程序设计艺术（第三卷）》中也指出了（大意）:也许是第一部出版的关于非数值程序设计方法的书（1946）中，首先提出了二分查找。再到后来的许多人对二分算法的改进直至60年代往后，所有工作才算是基本完成。</p><p><strong>一些待解决的问题——</strong></p><ol><li>中位数索引值的获取</li><li>循环执行条件的设置与返回值的选择</li><li>分支语句的选择</li></ol><p><strong>关于模板——</strong></p><p>这里借助Thomas H. Cormen在《算法基础—打开算法之门》中的一段伪代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">程序   BINARY-SEARCH(A,n,x)</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">·A：一个数组；</span><br><span class="line">·n：要查找的数组A中元素的个数；</span><br><span class="line">·x：要查找的值；</span><br><span class="line"></span><br><span class="line">输出：要么是满足A[i]=x的索引i，要么是一个特殊值 NOT-FOUND（可取相对数组A的任何无效索引值，例如0或任意负整数）。</span><br><span class="line"></span><br><span class="line">//左右索性记为p,r；中间位置记为q</span><br><span class="line"></span><br><span class="line">1. 将p赋值为1，将r赋值为n。</span><br><span class="line">2. 只要p≤r，执行如下操作：</span><br><span class="line">        A. 将q赋值为⌊(p+r)/2⌋。</span><br><span class="line">        B. 如果A[q]=x，那么返回q。</span><br><span class="line">        C. 否则（A[q]≠x），如果A[q]&gt;x，那么将r赋值为q-1。</span><br><span class="line">        D. 否则（A[q]&lt;x），那么将p赋值为q+1。</span><br><span class="line">3. 返回 NOT-FOUND。</span><br></pre></td></tr></table></figure></p><p>这段算法描述是我们常规的理解和处理方法，这次打算讨论的是在它的基础上进行一定的改变，并简单谈谈优劣。</p><p><strong>基本思想——</strong></p><p>二分的基本思想其实就是每次可以将当前的数中将近一般的不满足要求的数全部除掉，所以大O时间复杂度是$O(\log_{2}n)$,可以达到对数级的复杂度。</p><p>为了真正了解二分搜索算法中所发生的事情，最好把它想象成一棵二叉搜索树。</p><p>关于平均比较次数暂且不论。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p><strong>1. 中位数索引值</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>上面的代码是我们经常写的，但它确实存在有bug，在于当left与right都很大的时候，left+right很有可能超过int类型能表示的最大值（32位机下为$2^{31}-1$，即2147483647），此时会产生整形溢出产生负值，为了避免此问题的发生一般会写作下面的形式：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>可以有效避免绝大多数会产生溢出的情况。但它并不是最完美的写法。我们知道对于二进制计算机来说，除法的计算并不容易完成，二进制的位运算应该是最简单快捷的。当面对需要以二作为除数的时候，选择&gt;&gt;1，会带来更好的效果。但仅仅只是修改这一点，mid的计算仍旧存在冗余的部分。</p><p>我们从原码的角度思考，其实不难发现，因为第一位用来表示正负符号的缘故，当发4个字节下可以表示的最大正整数比int最大值两倍还多。当发生整形溢出时，实际存储的二进制只不过因为最高位从0变为1，导致整形正数被认为是整形负数，无法正确表示我们目标的数值，但其实内部存储的数据如果按无符号整形（即最高位具有二进制权值，而非表示符号）来输出其实是我们需要的值，此时再对这个数进行<font color="#FF0000">无符号的&gt;&gt;1</font>操作得到我们需要的除二结果。</p><p>关于无符号右移，在java中使用&gt;&gt;&gt;，所以java代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mid = (right + left) &gt;&gt;&gt; <span class="number">1</span> ;</span><br></pre></td></tr></table></figure></p><p>而在c语言中，仅有的&gt;&gt;运算符却是在有符号位时产生的是有符号的右移，所以运算前需要将运算数值强制类型转换为无符号型，再右移。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mid=((<span class="keyword">unsigned</span> <span class="keyword">int</span>)(left+right))&gt;&gt;<span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>不进行强制类型转换的话，会把溢出产生的负数值除二。具体大家看下面的例子：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">2147483647</span>,b=<span class="number">2147483645</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,(a+b)&gt;&gt;<span class="number">1</span>);<span class="comment">//结果输出-2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%u"</span>,((<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a+b))&gt;&gt;<span class="number">1</span>);<span class="comment">//结果输出2147483646</span></span><br></pre></td></tr></table></figure></p><p><strong>2. 算法设计</strong></p><p>这里将之前提出的关于“循环执行条件的设置与返回值的选择”以及“分支选择”问题归结在一起，我们其实是从算法设计的角度来考虑的。</p><p>首先如上面的伪代码，我们循环的条件设置的为left≤right，出循环时的情况是left已经越过right，表示全部的元素都被搜索完。我们的修改是将循环条件改为left &lt; right,此时出循环的情况为left与right相等，表示整个数组只有现在唯一一个元素没有被搜索，也就是下标为left（right）的元素。根据不同的情形，对最后一个元素进行判断。比如说，我们知道这个数组一定会有我们搜索的值时，此时不用判断就可以知道当其他元素都被排除时，最后这个就是我们要找的元素。如果我们不确定是否一定存在，那么在循环外部额外判断此时最后的元素是否满足条件即可。</p><p>问题的关键在于这样的设计意义是什么，因为当我们用之前的方法，我们在每一次都需要判断是否中值是我们需要的值，但是根据统计规律要查找的数据一般情况下出现在中间的情况并不多。而且出循环时表示没有找到，举个例子：某些情况下我们会想把没有找到的元素添加进我们所查找的表中时，我们想先返回插入的位置，此时我们需要考虑返回left或者right。而每次遇到不同的问题我们需要返回的值都需要根据不同的情况选择，这样的设计并不完美。我们对于任意情况下都可以统一处理是理想状态，这样这段代码的复用性也会变高。</p><p>关于死循环，死循环容易发生在只有 2 个元素时，我需要慎重选择中位数，一定要确保：</p><ol><li>如果分支的逻辑，在选择左边界的时候，不能排除中位数，那么中位数就选“右中位数”，只有这样区间才会收缩，否则进入死循环。</li><li>同理，如果分支的逻辑，在选择右边界的时候，不能排除中位数，那么中位数就选“左中位数”，只有这样区间才会收缩，否则进入死循环。</li></ol><p>在区间中的元素只剩下 2 个时候，例如：left = 3，right = 4。此时左中位数就是左边界，如果你的逻辑执行到 left = mid 这个分支，且你选择的中位数是左中位数，此时左边界就不会得到更新，区间就不会再收缩（理解这句话是关键），从而进入死循环；<br>为了避免出现死循环，你需要选择中位数是右中位数，当逻辑执行到 left = mid 这个分支的时候，因为你选择了右中位数，让逻辑可以转而执行到 right = mid - 1 让区间收缩，最终成为 1 个数，退出 while 循环。</p><h1 id="总结与延申"><a href="#总结与延申" class="headerlink" title="总结与延申"></a>总结与延申</h1><p>其实Donald Knuth在著作中也指出了</p><blockquote><p>H.Bottenbruch迈出了二分算法的第二步，介绍了有趣的变形，避免了在最后结束之前单作一次相等判断：在步骤B2中利用$i⬅⌈(l+u)/2⌉$代替$⌊(l+u)/2⌋$，每当 $K≥K_i$时置$l⬅i$；然后在每一步中$u-l$都减值。最后，当$l=u$时，我们有$K_l≤K≤K_{l+1}$，而且再做一次比较即可判断这个查找是否成功（假定开始时$K≥K_l$）。这个思想子啊许多计算机上稍微加速了内循环，而且同样的原理可以在这一节讨论的所有算法使用，但由于此前推导出的一次成功的平均查找次数于一次不成功的平均查找次数之间的关系一次成功的查找平均将要求大约再做一次迭代。由于内循环仅执行$lgN$次，因此在这一次额外的迭代与一次更快的循环之间的折衷并不节省时间，除非N非常大。在含有重复码值时，获取该算法给定码值最右出现，这一性质有时很重要。<br><em>大师的思想与见识比我们深远的多，多多读书无疑是一场对于世界和自我的再发掘。</em></p></blockquote><p>在上述描述中，我们不难看出来其实整个算法的核心就是在靠左右边界夹逼，而我们做出的改变其实再更深刻的讨论中，在不涉及大数量的情况下，对时间的影响并不明显。但是这种算法仍然有可用性，就如我在之前分析的一样。</p><p>最后的一点延申，我们的二分使用了left mid right三个指针，而仅使用如下两个量，记录当前位置i,和它的变化速度δ；每次不相等的比较之后，我们可以置i⬅1±δ和δ⬅δ/2（近似地）。这是可以的，但要对细节极端小心才行，简化的解决方法注定引起失误！这个算法实现后，产生的一颗“均匀的”二分查找树，我们可以观察它得到更好的算法。</p><p>而且另外一点我们在整个过程的观察中，其实可以发现斐波那契数列可以起到和2的乘方相似的作用。斐波那契搜索就是在二分查找的基础上根据斐波那契数列进行分割的。在斐波那契数列找一个等于略大于查找表中元素个数的数F[n]，将原查找表扩展为长度为F[n]<br>(如果要补充元素，则补充重复最后一个元素，直到满足F[n]个元素)，完成后进行斐波那契分割，即F[n]个元素分割为前半部分F[n-1]个元素，后半部分F[n-2]个元素，找出要查找的元素在那一部分并递归，直到找到。斐波那契查找，是区间中单峰函数的搜索技术。乍看之下，似乎有些神秘，就如Donald Knuth所说，如果我们简单地把程序拿出来并试图看看它在干什么活，它似乎在变魔术，但只要把查找树画出来，神秘感就消失了。<br>这次地介绍就到此结束了。</p><p><em><font color="#FF0000" size="0">关于平均比较数和均匀二分查找等详细内容，本文暂时未涉及，后续可能补充，有兴趣的读者可以自行了解。</font></em></p><hr><p align="right"><font face="Segoe Script">Attempt the end;and never stand to doubt;<br>Nothing's so hard,but search will find it out.</font></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;2019年终记事：一年的经历那么多，回忆起来却短的不可想象。2019年的最后一篇博客，回想第一篇到现在，虽然一路上走走停停，但学习的脚步还在前进。短短二十年放弃的东西比一声叹息多多了，回头看来人生得要有一件能坚持下去的东西……新年的钟声带不走2019的遗憾，希望它能
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Excel模块简析</title>
    <link href="http://yoursite.com/2019/06/02/Excel%E6%A8%A1%E5%9D%97%E7%AE%80%E6%9E%90/"/>
    <id>http://yoursite.com/2019/06/02/Excel模块简析/</id>
    <published>2019-06-02T09:30:47.000Z</published>
    <updated>2019-08-07T07:08:09.971Z</updated>
    
    <content type="html"><![CDATA[<hr><p>Python中处理Excel文件主要依靠xlrd xlwt和pandas库的模块进行数据处理。这里主要介绍xlrd和xlwt扩展包。</p><hr><p>xlrd 是一个库, 用于读取 Excel 文件中的数据和格式信息, 无论它们是. xls 还是. xlsx 文件。<br>对于包含文本的数据处理我们需要注意的是扩展包所支持的编码方案，此包将所有文本字符串显示为 Python unicode 对象。<br>我们通常会接触到的Exel文件中日期的存储方式与一般数据有格式上的区别。但是在Excel文件中，日期不存储为单独的数据类型;它们存储为浮点数。这个浮点数代表从1990年1月0日，或者说1899年12月31日开始经过的日期数加上一个24小时的小数部分。（注：在Mac上日期是从1994年1月1日开始）这对我们处理这些数据产生了预期之外的困难，原因在于我们不容易分辨一个浮点数是否表示日期数据。对于本模块，它通过检查已应用于每个数字单元格的格式来帮助我们，它可以检测到单元格数据的格式，从而判定单元格中的值是否是日期。但我们处理这些数据时，仍要格式化进行。往往我们的处理方式如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> worksheet.cell_type(row_index, col_index) == <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">date_cell = xldate_as_tuple(worksheet.cell_value(row_index,col_index),workbook.datemode)</span><br><span class="line">date_cell = date(*date_cell[<span class="number">0</span>:<span class="number">3</span>]).strftime(<span class="string">'%m/%d/%Y'</span>)</span><br></pre></td></tr></table></figure></p><p>简单解释一下，在xlrd的文档中我们可以知道，日期型数据的单元格类型为3。这里使用了worksheet对象的cell_value函数和行列索引来获得单元格中的值。这个值作为xldate_as_tuple()函数的第一个参数，参数workbook.datemode，可以使函数确定日期是基于1990年还是1994年，返回一个元组。strftime将data对象转化为格式化字符串。<br>基础部分我就直接列在下方：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xlrd.open_workbook(filename=<span class="keyword">None</span>, logfile=&lt;_io.TextIOWrapper name=<span class="string">'&lt;stdout&gt;'</span> mode=<span class="string">'w'</span> encoding=<span class="string">'UTF-8'</span>&gt;, verbosity=<span class="number">0</span>, use_mmap=<span class="number">1</span>, file_contents=<span class="keyword">None</span>, encoding_override=<span class="keyword">None</span>, formatting_info=<span class="keyword">False</span>, on_demand=<span class="keyword">False</span>, ragged_rows=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure></p><p><em>filename– 要打开的电子表格文件的路径。</em>logfile – 一个打开的文件, 将消息和诊断写入其中。<br><em>verbosity – 增加写入日志文件的跟踪材料的数量。</em>use_mmap – 是否使用 mmap 模块是试探性确定的。使用此参数覆盖结果。<br>目前的试探: mmap (如果存在) 将使用它。<br>file_contents – 一个字符串或者一个mmap.mmap对象或者其他类似行为的对象。 如果file_contents提供, filename将不会被使用, except (possibly)但 (可能) 在消息中除外。<br>encoding_override – 用于克服旧版本文件中丢失或错误的代码页信息。<br>formatting_info –默认值为False, 它节省内存。 在这种情况下, “空白” 单元格 (具有自己的格式信息但没有数据) 通过忽略文件的BLANK和MULBLANK记录被视为空。 这将切断空单元格或空白单元格行的任何底部或右侧 “边距”。<br>当为True,格式信息将从电子表格文件中读取。这将提供所有单元格, 包括空单元格和空白单元格。格式信息可用于每个单元格。<br>请注意, 当与 xlsx 文件一起使用时，这将引发注意实现错误,。<br>on_demand –控制工作表最初是否全部加载, 或者在调用方要求时加载。<br>ragged_rows –<br>默认值False表示所有行都用空单元格填充, 以便所有行的大小与 ncols中的大小相同。<br>True表示行的末尾没有空单元格。如果行的大小千差万别, 这可能会节省大量内存。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;Python中处理Excel文件主要依靠xlrd xlwt和pandas库的模块进行数据处理。这里主要介绍xlrd和xlwt扩展包。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;xlrd 是一个库, 用于读取 Excel 文件中的数据和格式信息, 无论它们是. xls 还是. xls
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sqlite3-SQLite数据库模块简单认识</title>
    <link href="http://yoursite.com/2019/05/26/sqlite3-SQLite%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%A1%E5%9D%97%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%86/"/>
    <id>http://yoursite.com/2019/05/26/sqlite3-SQLite数据库模块简单认识/</id>
    <published>2019-05-26T11:35:07.000Z</published>
    <updated>2019-08-07T07:08:47.163Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>SQLite 是一个C语言库，它可以提供一种轻量级的基于磁盘的数据库，这种数据库不需要独立的服务器进程，也允许需要使用一种非标准的 SQL 查询语言来访问它。一些应用程序可以使用 SQLite 作为内部数据存储。可以用它来创建一个应用程序原型，然后再迁移到更大的数据库，比如 PostgreSQL 或 Oracle。</em></strong><br>要使用这个模块，必须先创建一个 Connection 对象，它代表数据库。下面例子中，数据将存储在 example.db 文件中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import sqlite3</span><br><span class="line">conn = sqlite3.connect(&apos;example.db&apos;)</span><br></pre></td></tr></table></figure></p><p>你也可以使用 :memory: 来创建一个内存中的数据库</p><p>当有了 Connection 对象后，你可以创建一个 Cursor 游标对象，然后调用它的 execute() 方法来执行 SQL 语句：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">c = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建表</span></span><br><span class="line">c.execute(<span class="string">'''CREATE TABLE stocks</span></span><br><span class="line"><span class="string">             (date text, trans text, symbol text, qty real, price real)'''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入一行数据</span></span><br><span class="line">c.execute(<span class="string">"INSERT INTO stocks VALUES ('2006-01-05','BUY','RHAT',100,35.14)"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存（提交）更改</span></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们也可以在完成任务后，关闭连接</span></span><br><span class="line"><span class="comment"># 只需要保证在关闭之前任何更改都已提交</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></p><p>这些数据被持久化保存了，而且可以在之后的会话中使用它们：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">'example.db'</span>)</span><br><span class="line">c = conn.cursor()</span><br></pre></td></tr></table></figure></p><p>通常你的 SQL 操作需要使用一些 Python 变量的值。你不应该使用 Python 的字符串操作来创建你的查询语句，因为那样做不安全；它会使你的程序容易受到 SQL 注入攻击（在 <a href="https://xkcd.com/327/" target="_blank" rel="noopener">https://xkcd.com/327/</a> 上有一个搞笑的例子，看看有什么后果）</p><p>推荐另外一种方法：使用 DB-API 的参数替换。在你的 SQL 语句中，使用 ? 占位符来代替值，然后把对应的值组成的元组做为 execute() 方法的第二个参数。（其他数据库可能会使用不同的占位符，比如 %s 或者 :1）例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Never do this -- insecure!</span><br><span class="line">symbol = &apos;RHAT&apos;</span><br><span class="line">c.execute(&quot;SELECT * FROM stocks WHERE symbol = &apos;%s&apos;&quot; % symbol)</span><br><span class="line"></span><br><span class="line"># Do this instead</span><br><span class="line">t = (&apos;RHAT&apos;,)</span><br><span class="line">c.execute(&apos;SELECT * FROM stocks WHERE symbol=?&apos;, t)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># Larger example that inserts many records at a time</span><br><span class="line">purchases = [(&apos;2006-03-28&apos;, &apos;BUY&apos;, &apos;IBM&apos;, 1000, 45.00),</span><br><span class="line">             (&apos;2006-04-05&apos;, &apos;BUY&apos;, &apos;MSFT&apos;, 1000, 72.00),</span><br><span class="line">             (&apos;2006-04-06&apos;, &apos;SELL&apos;, &apos;IBM&apos;, 500, 53.00),</span><br><span class="line">            ]</span><br><span class="line">c.executemany(&apos;INSERT INTO stocks VALUES (?,?,?,?,?)&apos;, purchases)</span><br></pre></td></tr></table></figure></p><p>要在执行 SELECT 语句后获取数据，你可以把游标作为 iterator，然后调用它的 fetchone() 方法来获取一条匹配的行，也可以调用 fetchall() 来得到包含多个匹配行的列表。</p><p>下面是一个使用迭代器形式的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for row in c.execute(&apos;SELECT * FROM stocks ORDER BY price&apos;):</span><br><span class="line">        print(row)</span><br><span class="line"></span><br><span class="line">(&apos;2006-01-05&apos;, &apos;BUY&apos;, &apos;RHAT&apos;, 100, 35.14)</span><br><span class="line">(&apos;2006-03-28&apos;, &apos;BUY&apos;, &apos;IBM&apos;, 1000, 45.0)</span><br><span class="line">(&apos;2006-04-06&apos;, &apos;SELL&apos;, &apos;IBM&apos;, 500, 53.0)</span><br><span class="line">(&apos;2006-04-05&apos;, &apos;BUY&apos;, &apos;MSFT&apos;, 1000, 72.0)</span><br></pre></td></tr></table></figure></p><hr><p>摘自Python官方文档</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;SQLite 是一个C语言库，它可以提供一种轻量级的基于磁盘的数据库，这种数据库不需要独立的服务器进程，也允许需要使用一种非标准的 SQL 查询语言来访问它。一些应用程序可以使用 SQLite 作为内部数据存储。可以用它来创建一个应用程序原型，然后再
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浮点的限制与争议</title>
    <link href="http://yoursite.com/2019/05/19/%E6%B5%AE%E7%82%B9%E7%9A%84%E9%99%90%E5%88%B6%E4%B8%8E%E4%BA%89%E8%AE%AE/"/>
    <id>http://yoursite.com/2019/05/19/浮点的限制与争议/</id>
    <published>2019-05-19T04:22:38.000Z</published>
    <updated>2019-05-19T05:21:25.407Z</updated>
    
    <content type="html"><![CDATA[<p>浮点算术在计算机领域的广泛应用不必多说。应该大多数人都有这样的经历，总是在不经意间会遇到浮点运算的一些不满足预期的奇怪输出。这里主要来探讨一下个中奥秘。<br>首先，我们都明白，大多数十进制小数都不能精确地表示为二进制小数，这导致在大多数情况下，你输入的十进制浮点数都只能近似地以二进制浮点数形式储存在计算机中。用十进制来理解这个问题显得更加容易一些。考虑分数$1/3$。我们可以得到它在十进制下的一个近似值$0.3$，或者更接近$0.33$，或者更接近的$0.333……$无论你写下多少，永远只能更接近。同样，我们用$2$作为基数，$0.1$是永远也无法精确表示为二进制的小数。在二进制下，$1/10$是一个无限循环小数$0.0001100110011001100110011001100110011001100110011…$在任何一个位置停下都仅仅只是近似值。因此，在今天的大部分架构上，浮点数都只能近似地使用二进制小数表示，对应分数的分子使用每8字节的前53位表示，分母则表示为$2$的幂次(IEEE754)。在$1/10$这个例子中，相应的二进制分数是 $3602879701896397/2^{55}$ ，它很接近$1/10$，但并不是$1/10$。往往我们能观察到的输出结果精度达不到近似值有差异的地方。记住了，即使输出的结果看起来好像就是$1/10$的精确值，实际储存的值只是最接近$1/10$的计算机可表示的二进制分数。有趣的是，有许多不同的十进制数共享相同的最接近的近似二进制小数。例如，$0.1$、$0.10000000000000001$、$0.1000000000000000055511151231257827021181583404541015625$全都近似于$3602879701896397/2^{55}$。由于所有这些十进制值都具有相同的近似值，因此可以显示其中任何一个。<br>出现浮点运算不符合预期值的情况，其本质不是语言的限制，也不是代码的问题，你在所有支持在硬件中浮点运算的语言都会发现相同的情况。<br>有时我们想要更美观的输出，我们可以对小数进行格式化输出，但其实这并不影响浮点数在计算机里的存储值，只是见舍入后的结果进行显示而已。我们用Python举例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; format(math.pi,&apos;.12g&apos;)</span><br><span class="line">&apos;3.14159265359&apos;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; format(math.pi,&apos;.2f&apos;)</span><br><span class="line">&apos;3.14&apos;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; format(math.pi)</span><br><span class="line">&apos;3.141592653589793&apos;</span><br></pre></td></tr></table></figure></p><p>我们看到的输出结果只是表象而已，不理解内部的运算会在应用过程中产生很多问题。比如下面的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; .1+.1+.1==.3</span><br><span class="line">Flase</span><br></pre></td></tr></table></figure></p><p>我们无法将$2$为基数的$0.1$精确到十进制的$1/10$，对应的$0.3$同样无法精确。哪怕我们使用Python的$round()$函数预先舍入也无济于事。不过预后舍入就可以达到我们想要的效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; round(.1,1)+round(.1,1)+round(.1,1)==round(.3,1)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt;round(.1+.1+.1,10)==round(.3,10)</span><br><span class="line">True</span><br></pre></td></tr></table></figure></p><p>浮点数运算会造成许多这样的“意外”。不过大多数情况下一点误差是可以容忍的。需要注意的是，每次浮点运算都可能导致新的舍入错误。<br>对于需要精确十进制表示的使用场景，请尝试使用$decimal$模块，该模块实现了适合会计应用和高精度应用的十进制运算。<br>另一种形式的精确运算由$fractions$模块提供支持，该模块实现了基于有理数的算术运算（因此可以精确表示像$1/3$这样的数值）。<br>如果你是浮点运算的重度用户，你应该看一下数值运算Python包NumPy以及由SciPy项目所提供的许多其它数学和统计运算包。参见<a href="https://scipy.org" target="_blank" rel="noopener">https://scipy.org</a>。<br>Python也提供了一些工具，可以在你真的想要知道一个浮点数精确值的少数情况下提供帮助。例如float.as_integer_ratio()方法会将浮点数表示为一个分数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x=3.14159</span><br><span class="line">&gt;&gt;&gt; x.as_integer_ratio()</span><br><span class="line">(3537115888337719, 1125899906842624)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; x==3537115888337719/1125899906842624</span><br><span class="line">True</span><br></pre></td></tr></table></figure></p><p>这样的表示法是精确的，可以跨版本移植，和别的标准相同的语言（Java、C99）交换数据。</p><hr><p>这里引出问题所在和基本的解决措施。下一篇将深入本质探讨此问题，包括IEEE754的相关具体细节。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浮点算术在计算机领域的广泛应用不必多说。应该大多数人都有这样的经历，总是在不经意间会遇到浮点运算的一些不满足预期的奇怪输出。这里主要来探讨一下个中奥秘。&lt;br&gt;首先，我们都明白，大多数十进制小数都不能精确地表示为二进制小数，这导致在大多数情况下，你输入的十进制浮点数都只能近
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>算法题：爬楼梯</title>
    <link href="http://yoursite.com/2019/05/10/%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%9A%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
    <id>http://yoursite.com/2019/05/10/算法题：爬楼梯/</id>
    <published>2019-05-09T18:29:07.000Z</published>
    <updated>2019-08-07T10:00:04.697Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>题目：假设你正在爬楼梯，需要n阶你才能到达楼顶。每次你可以爬1阶或2阶台阶。你有多少种不同的方法可以爬到楼顶呢？</em></strong></p><hr><p>这里将对此问题写出多个解法，包括一般容易实现的递归，以及它的一步一步优化。</p><hr><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>这是我看到题目后最先想到的也是十分麻烦的方法，但我觉得有必要拿出来看看。思路是，如果爬楼梯每次都选择同一种，即要么全走两阶大致（n的奇偶决定，暂且定为偶数便于理解）一共n/2次到达楼顶，要么全走一阶一共n次就可以到达楼顶。选取其中一种状况进行分析即可，这两种都是终极状态，我需要做的是对两者的相互演化过程做出模拟即可。<br>举个例子，这里优先考虑把选择次数降到最低，每次均走2阶。然后把一个两阶拆成两个1阶，每次拆分选择次数就增加1，再对这一共n/2+1次选择进行排列组合得到一定的方法数，即绝大多数都是走2阶，选择一下在哪几次走一阶，不同的选择是不同的方法。然后再将一个两阶拆分，继续上述操作，直至把所有两阶全部拆分为1阶。这时统计所有方法数即可。这里的代码是上述例子的实现，因为涉及到排列组合，组合数用阶乘计算方便直接，所以又定义了两个子函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">int PermuteCombine(int WayNum,int StairsNum)//全部先尽可能多的转化为一次2个台阶的方法，，再将一次2个台阶拆解为两个一次台阶，在在总次数中排列组合。 </span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">if(StairsNum%2==0)//总阶数进行奇偶判断 ，处理大同小异，均从顶向下、以迭代的方法将问题 扩大为一个规模稍大的问题 </span><br><span class="line">for(i=0;i&lt;=StairsNum/2;i++)</span><br><span class="line">WayNum+=C(StairsNum/2+i,StairsNum/2-i);</span><br><span class="line">else</span><br><span class="line">for(i=0;i&lt;(StairsNum+1)/2;i++)</span><br><span class="line">WayNum+=C((StairsNum+1)/2+i,(StairsNum-1)/2-i); </span><br><span class="line">return WayNum;</span><br><span class="line">&#125;</span><br><span class="line">int factorial(int n)//阶乘函数 n！ </span><br><span class="line">&#123;</span><br><span class="line">if(n==1)return 1;//递归出口 </span><br><span class="line">return n*factorial(n-1);</span><br><span class="line">&#125;</span><br><span class="line">int C(int n,int m)//利用数学定义计算组合数 ,n个不同元素中取出m个元素的组合数。用符号 C(n,m) 表示</span><br><span class="line">&#123;</span><br><span class="line">if(m==0||n==m)//特殊情况处理 </span><br><span class="line">return 1;</span><br><span class="line">else</span><br><span class="line">return (factorial(n)/(factorial(n-m)*factorial(m)));//计算公式C(n,m)=n!/[m!*(n-m)!]将结果返回 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不难看出，这里的处理其实是不断地将问题规模扩大，而如果先假定全走1阶，则整个程序体现出来，应该是越来越多的两个一组的1阶被一个二阶取代，问题规模不断变小。其实本质是一样的。</p><blockquote><p>贪心算法（英语：greedy algorithm），又称贪婪算法，是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。不从整体最优上加以考虑，它所做出的是在某种意义上的局部最优解。</p></blockquote><p>这里的方法其实也不是特别符合贪婪的定义，但从某种处理方式上来看具有一定的相似性。贪心算法简单来说两个基本要素，一是贪心选择，而是最优子结构。每做一次贪心选择就将所求问题简化为一个规模更小的子问题。先全走1阶，后一步一步合并成2阶，就是这样一个过程。当一个问题的最优解包含其子问题的最优解时，称此问题具有最优子结构性质。这里与动态规划十分接近，可以推测此题应该也会有动态规划的解法。<br>    至于贪心的局限在于它在达成整体最优的路上是不可回退的。即在当前选择时，是无法返回上一次选择的状态。</p><h2 id="树形递归模拟爬楼梯"><a href="#树形递归模拟爬楼梯" class="headerlink" title="树形递归模拟爬楼梯"></a>树形递归模拟爬楼梯</h2><p>上一个算法不得不说写的是又烂又长，看的让人头大。这里要介绍的方法理解起来倒是简单多了。看到小标题，相信大家心里已经知道是什么样的了，不多说了，上代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int recursion(int NowNum,int StairsNum)//从0阶台阶开始模拟爬楼梯，构建一个递归树 ，每一层都有两个分支选择，+1或+2。 </span><br><span class="line">&#123;//两个递归出口 </span><br><span class="line">if(NowNum&gt;StairsNum)//上一阶加2后超出总阶数 则此方法无效不计数 </span><br><span class="line">return 0;</span><br><span class="line">if(NowNum==StairsNum)//刚好满足总阶数   则此方法（在递归树中的分支路径）有效记一次 </span><br><span class="line">return 1;</span><br><span class="line">return recursion(NowNum+1,StairsNum)+recursion(NowNum+2,StairsNum);// 将当前方法（路径）继续深化到下一层，直到返回 。上一层方法是下层方法的总和，每层都有两个分支。 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>树形递归，时间复杂度$O(2^n)$，空间树大小$2^n$。</p><h2 id="记忆化递归"><a href="#记忆化递归" class="headerlink" title="记忆化递归"></a>记忆化递归</h2><p>上一个方法倒是简单易懂，但不可避免的浪费了许多空间和时间。其实如果你仔细画过或者模拟过上面的递归树，不难发现一件事，我们有很多重复计算。没有模拟过也不要紧，我们现在大致演示一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">                   0</span><br><span class="line">  _________|__________</span><br><span class="line"> |                    |</span><br><span class="line"> 1       2</span><br><span class="line">    _____|_____          _____|_____</span><br><span class="line">   |           |        |           |</span><br><span class="line">   2           3        3           4</span><br><span class="line"> __|__       __|__    __|__       __|__</span><br><span class="line">|     |     |     |  |     |     |     |</span><br><span class="line">3     4     4     5  4     5     5     6</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><p>仔细观察会发现在这个树中，有许多相似的结构分支，尤其是从零开始的分支2，直接包含在分支1中，也就是说，我们深度优先遍历递归树的时候，其实有多于一半的时间和大量空间的浪费都是不必要的。我们只需要用一个数组记录每次的值，当需要递归去计算某个分支时，如果已经计算过则直接从数组中获取值即可，不必再次遍历子树。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//在主函数中要先定义记忆数组，并初始化零。</span><br><span class="line">int memo[StairsNum+1],i;</span><br><span class="line">for(i=0;i&lt;StairsNum+1;i++)//变量定义数组长度后无法直接初始化，定义完后用循环初始化数组。 </span><br><span class="line">memo[i]=0;</span><br><span class="line"></span><br><span class="line">int MemoRecur(int NowNum,int StairsNum,int memo[])// 之前的递归过程有大量的重复计算，改进后把每一步结果都储存下来，以便需要的时候直接使用就不用再次进入递归计算，减少时间，定义数组会占用n大小的空间 </span><br><span class="line">&#123;</span><br><span class="line">if(NowNum&gt;StairsNum)</span><br><span class="line">return 0;</span><br><span class="line">if(NowNum==StairsNum)</span><br><span class="line">return 1;</span><br><span class="line">if(memo[NowNum]&gt;0)</span><br><span class="line">return memo[NowNum];</span><br><span class="line">memo[NowNum]=MemoRecur(NowNum+1,StairsNum,memo)+MemoRecur(NowNum+2,StairsNum,memo);</span><br><span class="line">return memo[NowNum]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>典型的浪费空间换取时间的策略。毫无疑问我们将上一次的算法进行了优化。</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>之前的猜测可以证实了，这里确实可以用动态规划，尤其是在上一个优化中，我们发现记忆数组其实帮我完成了一件事——抽象描述就是：使得我们可以在选择时回退到之前选择过的情形而直接获取答案。至于这里使用动态规划的考虑是这样的：如第i阶可由(i-1)阶爬1阶或(i-2)阶爬两阶得到，规划到最初，第三阶由第二阶爬1阶或第1阶爬两阶得到，第四阶是三阶爬1或2阶爬2…类推 。代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int DynamicProgram(int StairsNum)</span><br><span class="line">&#123;</span><br><span class="line">int dp[StairsNum+1],i;</span><br><span class="line">dp[1]=1,dp[2]=2;</span><br><span class="line">for(i=3;i&lt;StairsNum+1;i++)</span><br><span class="line">dp[i]=dp[i-1]+dp[i-2];</span><br><span class="line">return dp[StairsNum];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一层循环就结束整个问题，相应，降低了时间，但是用了数组就浪费了空间。</p><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><p>其实大家应该在之前的某种方法就已经的发现，这道题在数学上就是求斐波那契数列的第N项的值。那么如何求这个数列就变得重要了。也许有人会用递归算，这不免和之前的我们优化过的算法陷入同样的情况，子树会重复，再一步一步优化就到了用一遍循环就算出值。其实对这个数列有所了解的同学应该知道，这个数列是有通项公式的。如下<br>$a_n=\frac{1}{\sqrt 5}[(\frac{1+\sqrt 5}{2})^n-(\frac{1-\sqrt 5}{2})^n]$<br>我们将值代入即可求出对于的通项值，代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int Fib(int StairsNum)//直接使用公式,空间O(1),由于使用POW函数，时间变为O(log n) </span><br><span class="line">&#123;</span><br><span class="line">double s5=sqrt(5);</span><br><span class="line">return(int)(1/s5*(pow((1+s5)/2,StairsNum+1)-pow((1-s5)/2,StairsNum+1)));//可能由于计算精度问题，极少部分答案与准确值相差1， </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于计算次方我们调用了pow()函数，需要导入math.h，无形中我们在计算公式时，还是会消耗一定时间。这时我们的空间复杂度$O(1)$，调用函数缘故，时间复杂度：$O(\log_{}n)$</p><h2 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h2><p>借助公式的方法其实不是那么完美，因为有时会有情况限制我们对于函数的使用，那有没有类似的方法可以快速计算出斐波那契数列呢？这里介绍矩阵快速幂。要能使用这方法，我们需要先知道如何用矩阵表示斐波那契数列。<br>我们引入矩阵乘法进行推导：<br>$\left[<br> \begin{matrix}<br>   F_n\\<br>   F_{n-1}<br>  \end{matrix}<br>\right]=<br>\left[<br> \begin{matrix}<br>   F_n+F_{n-2}\\<br>   F_{n-1}<br>  \end{matrix}<br>\right]=<br>\left[<br> \begin{matrix}<br>   1&amp;1\\<br>   1&amp;0<br>  \end{matrix}<br>\right]\cdot<br>\left[<br> \begin{matrix}<br>   F_{n-1}\\<br>   F_{n-2}<br>  \end{matrix}<br>\right]$<br>然后化简：<br>$\left[<br> \begin{matrix}<br>   F_n\\<br>   F_{n-1}<br>  \end{matrix}<br>\right]=<br>\left[<br> \begin{matrix}<br>   1&amp;1\\<br>   1&amp;0<br>  \end{matrix}<br>\right]^{n-1}\cdot<br>\left[<br> \begin{matrix}<br>   1\\<br>   0<br>  \end{matrix}<br>\right]$<br>此时我们知道，想要得出含有斐波那契数列的矩阵，只需要对一个矩阵求幂即可，那么如何能快速求出高次幂变成我们关注的重点。<br>首先由整数快速幂引入。当我们想求$x^8$时，我不必将x自乘8次，而是可以转化为求$x^2$三次，主要是这种结合思想。那用怎样的策略才能把高次拆分成计算最快的低次乘积？我们用$x^{25}$举例子。<br>25的二进制是11001,则$x^{25}=x^{16}\cdot x^8\cdot x^1$，具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int QuickPow(int x,int N)</span><br><span class="line">&#123;</span><br><span class="line">    int res = x;</span><br><span class="line">    int ans = 1;</span><br><span class="line">    while(N)</span><br><span class="line">    &#123;</span><br><span class="line">        if(N&amp;1)//位与运算判断N最后一位是否为1</span><br><span class="line">        &#123;</span><br><span class="line">            ans = ans * res;</span><br><span class="line">        &#125;</span><br><span class="line">        res = res*res;</span><br><span class="line">        N = N&gt;&gt;1;//位右移，判断下一位</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出res与二进制位权值对应，而ans则负责将我们二进制位上存在1 的进行记录。当N=25时，最终res变成了$x^{32}$，ans变成了$x^{25}$。简单来说就是res一直跑，当遇到我们需要的ans时，在前一次的ans上再乘当前的res。快速幂的处理方法就是这样，这种情形下，我们只使用常量级空间$O(1)$，时间复杂度到了与使用函数一样的$O(\log_{}n)$。我们现在只需要把这种方法放到矩阵中去即可。代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">int QuickPower(int N)</span><br><span class="line">&#123;</span><br><span class="line">int n=2,i,j;</span><br><span class="line">N-=1;//</span><br><span class="line">int ans[2][2],res[2][2],tep[2][2];</span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">for(j=0;j&lt;n;j++)//初始化ans矩阵，变成单位矩阵E，进行矩阵乘法的基石 </span><br><span class="line">&#123;</span><br><span class="line">if(i==j)</span><br><span class="line">ans[i][j]=1;</span><br><span class="line">else</span><br><span class="line">ans[i][j]=0;</span><br><span class="line">&#125;</span><br><span class="line">for(i=0;i&lt;n;i++)//初始化res矩阵 </span><br><span class="line">for(j=0;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line">if(i&amp;&amp;j)</span><br><span class="line">res[i][j]=0;</span><br><span class="line">else</span><br><span class="line">res[i][j]=1;</span><br><span class="line">&#125;</span><br><span class="line">while(N)//快速幂部分 </span><br><span class="line">&#123;</span><br><span class="line">if(N&amp;1)</span><br><span class="line">&#123;//ans=ans*res</span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">for(j=0;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line">tep[i][j]=ans[0][j]*res[i][0]+ans[j][1]*res[1][i];</span><br><span class="line">&#125;</span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">for(j=0;j&lt;n;j++)</span><br><span class="line">ans[i][j]=tep[i][j];</span><br><span class="line">&#125;//res=res*res</span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">for(j=0;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line">tep[i][j]=res[0][j]*res[i][0]+res[j][1]*res[1][i];</span><br><span class="line">&#125;</span><br><span class="line">for(i=0;i&lt;n;i++)</span><br><span class="line">for(j=0;j&lt;n;j++)</span><br><span class="line">res[i][j]=tep[i][j];</span><br><span class="line">N&gt;&gt;=1;</span><br><span class="line">&#125;</span><br><span class="line">return ans[0][0];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>至此我要介绍的全部方法都结束了。其实，如果认真看下来，可能都有点忘了我们最初只是为了算出爬楼梯的方法数。我之所以要写这么多方法是因为我觉得这些方法远比一道题的最优解重要。因为有些方法可能在这道题里并不是最优的解法，但在别的题里或许是最优的解。我们应该能理解并使用这些方法，哪怕是最开始的贪婪算法，只要掌握了思想，其实在许多地方是有用武之地的。</p><p>总结：爬楼梯问题在本质上来说就是将整体最优解转化为子问题最优解，可选方案包括动态规划与贪心算法，<br>具体到本问题中斐波那契数列的应用以及简化，都是动态规划在此情形下的数学优化，而使用排列组合方法则是贪心算法的体现，如果将问题的特征更一般化，通用的解决方案还得从本质的动态规划和贪心入手，而动态规划相比于贪心则更容易实现，且贪心的每一个操作都会对结果产生直接影响，而动态规划可以把之前的数据保存下来可以回退，数据更立体，可操作性更强。</p><p><em>匆忙总结，如有错误,海涵见谅。</em>😋</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;题目：假设你正在爬楼梯，需要n阶你才能到达楼顶。每次你可以爬1阶或2阶台阶。你有多少种不同的方法可以爬到楼顶呢？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这里将对此问题写出多个解法，包括一般容易实现的递归，以及它的一步一步优化。&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>异常处理</title>
    <link href="http://yoursite.com/2019/05/07/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2019/05/07/异常处理/</id>
    <published>2019-05-07T04:13:15.000Z</published>
    <updated>2019-08-07T07:10:40.269Z</updated>
    
    <content type="html"><![CDATA[<p><em>引言：每当人们接触事物时不免产生对其基本概念的哲学思考。也许对人来讲，一句简单的“我是谁？”就足足困扰了哲学家千年，但面对计算机，有些问题却显得容易回答得多了。曾听闻一个观点，研究自然科学是相当困难的，因为对象是自然界，是通过既有的方法与认知对现象进行解读，是在未知中探索；而对于学习一些人们既定的规则也好，生产工具也罢，相对是容易的，因为这些东西都是人类创造产生的，为了提升生产效率等各方面原因，人不必为难自己，一切一定以最易接受和使用为前提。如今想来有些道理，我们有意图所以我们创造，创造工具，构建规则，便利自己。<br>（这篇文章以异常处理为主线讲述，异常这个概念的产生，由何而来，产生的意义，对于它的存在进行探讨。以广义入手，实践落实在 Python3 的应用上 ）</em></p><h2 id="异常是什么？"><a href="#异常是什么？" class="headerlink" title="异常是什么？"></a>异常是什么？</h2><ul><li><strong>标准概念</strong>：异常指的是在程序运行过程中发生的异常事件，通常是由外部问题（如硬件错误、输入错误）所导致的。在Python、Java等面向对象的编程语言中异常属于对象。</li><li><strong>个人理解</strong>：一般来讲异常是个事件，在程序<font color="#DC143C">运行</font>时大多不会被处理，而影响了程序的正常执行。对于程序来讲，其语句或表达式在语法上是正确的，但在尝试执行时，这个事件（异常）会引发错误。这里先入为主地讲，一些面向对象的编程语言将此事件引发的错误抽象成一个对象，亦命名为“异常”，所有异常对象组成一个类。在 Python 中, 所有异常都必须是从 BaseException 派生的类的实例。<blockquote><p><em>更多异常在Python中的细节，建议阅读<a href="https://docs.python.org/3/tutorial/errors.html" target="_blank" rel="noopener">官方文档</a>。需要注意的是，在Python中标准的异常类型是内置的标识符（而不是保留关键字）。<br>（注：大致浏览完文档后，会发现之前先入为主的观点是有些不全面的，为了符合人对于异常的第一印象和某种潜在认知，此前我隐式地将异常与错误等同，其实在Python中，异常不仅仅是以Error作为尾缀的，即有些异常在某种层面上来讲并不是一个错误，而更像是之前讲的，导致程序无法正常执行的事件。）</em></p></blockquote></li></ul><p><strong>说了这么多，异常存在的意义是什么呢？</strong><br>其实是把”程序无法正常进行“这件事更抽象化的集中起来，归为一类。面向对象编程具有更高的整合能力，一个类是具有相同的方法和属性的，这样使我们对于这类事件有了更统一化且流程化的处理方式。这样的处理方式我们称为“异常处理”。</p><h2 id="异常处理是什么？"><a href="#异常处理是什么？" class="headerlink" title="异常处理是什么？"></a>异常处理是什么？</h2><p>上文似乎已经回答了这个问题，但不妨碍我们再深入探究一下。惯例先来一下官方一点的定义<br><em>Wiki：异常处理，是编程语言或计算机硬件里的一种机制，用于处理软件或信息系统中出现的异常状况（即超出程序正常执行流程的某些特殊条件）。</em><br>追根溯源一下，其实在本文讨论的异常处理这种方式出现前，人们对于软硬件不能正常操作时，系统设置了错误代码，即 error code ,对于不同的错误代码有不同的原因导致，操作者可以对其进行识别并找到原因。这样说不够直观，给个例子，比如网页的错误代码  404 ，不用多说相信很多人都见过类似的错误代码。error code 算是异常处理某种意义上的前生，异常处理是代替日渐衰落的error code方法的新法，提供error code 所未能具体的优势。<br><strong>接下来讨论对于编程来讲，这样的处理方式与传统的返回标志配合选择结构有什么区别和优势呢？</strong><br>拿大家应该都熟悉的C语言举例吧，早期我们对于c语言的异常处理机制，通常是我们认为的对返回结果加一些标志来进行判定，如发生错误返回什么标志，正常情况下我们又是返回什么标记，对于不同的标志我们借助选择结构去进行不同的处理，但这些都不是语言本身所赋予我们的，这种机制的问题在于，C语言的异常处理机制全是我们人为的定义，过度的自由往往会导致难以驾驭的混乱产生，如果没有体制化的规则或规范产生，就会造成业务逻辑的主线受到异常处理的牵制，或者说是我们难免会将注意力转移，并且造成业务逻辑与异常处理之间有很大程度上的缠绕。而对于Python来说，它有内部有已经构建好的异常类，我们使用expection的机制，对这些使程序无法正常运行的事件经行捕获和处理，更加方便，使我们有更多的精力专注于业务逻辑，而不必要使主线与异常处理的方式过度耦合而导致难以维护，降低整个系统或程序的灵活性。<br>处理本身的讨论价值已经所剩无多，接下来的应该是这个过程的实现，也就是异常机制。<br><strong>机制问题：</strong></p><ul><li>程序执行方面，大部分常见的程序设计语言，都是沿着函数调用栈的函数调用逆向搜索，直到遇到异常处理代码为止。一般在这个异常处理代码的搜索过程中逐级完成栈卷回。</li><li>语法方面，多数语言的异常机制的语法是类似的：用throw或<font color="#1E90FF">raise</font>抛出一个异常对象（Java或C++等）；异常处理代码的作用范围用标记子句（<font color="#1E90FF">try</font>或begin开始的语言作用域）标示其起始，以第一个异常处理子句（catch,<font color="#1E90FF">expect</font>, rescue等）标示其结束；可连续出现若干个异常处理子句，每个处理特定类型的异常。某些语言允许<font color="#1E90FF">else</font>子句，用于无异常出现的情况。更多见的是<font color="#1E90FF">finally</font>, ensure子句，无论是否出现异常它都将执行，用于释放异常处理所需的一些资源。（蓝色为Python所采用的关键字）</li></ul><p><strong>大致介绍一下Python中关键字的原理</strong><br>由 <font color="#FF8C00">try</font> 讲起，作为处理机制的起始关键词，try的工作原理是如下（引用自<a href="https://docs.python.org/3/tutorial/errors.html" target="_blank" rel="noopener">官方文档</a>）</p><ul><li>首先，执行 try 子句 （try 和 except 关键字之间的（多行）语句）。</li><li>如果没有异常发生，则跳过 except 子句 并完成 try 语句的执行。</li><li>如果在执行try 子句时发生了异常，则跳过该子句中剩下的部分。然后，如果异常的类型和 except 关键字后面的异常匹配，则执行 except 子句 ，然后继续执行 try 语句之后的代码。</li><li>如果发生的异常和 except 子句中指定的异常不匹配，则将其传递到外部的 try 语句中；如果没有找到处理程序，则它是一个 未处理异常，执行将停止并显示如上所示的消息。<blockquote><p>try会控制一个子句，这个子句通常是我们想要测试是否会出现异常的代码段或者会经常出现过多与不可知问题的代码段，try界定了这样的一个范围。</p></blockquote></li></ul><p>与try搭配的就是 <font color="#FF8C00">expect</font> ，那么工作原理：一个 try 语句可能有多个 except 子句，以指定不同异常的处理程序。 最多会执行一个处理程序。 处理程序只处理相应的 try 子句中发生的异常，而不处理同一 try 语句内其他处理程序中的异常。基类的expect语句兼容派生类，反之不然。往往最后的 except 子句可以省略异常名，以用作通配符。</p><blockquote><p>expect的作用浅显易懂，与try搭配起来使用倒也有点 switch-case 的感觉，不过语法更简单，应用更灵活。</p></blockquote><p>主体讲完了，接下来说说可选子句，用做扩充。<br>首先<font color="#FF8C00">else</font>子句，在使用时必须放在所有的 except 子句后面。对于在try 子句不引发异常时必须执行的代码来说很有用。</p><blockquote><p>有时如果不给予通配符，而try语句中的代码出现未能捕获的异常，else的存在就降低了这种情况的出现。</p></blockquote><p><em>至于异常的 <font color="#FF8C00">args</font> 和 <font color="#FF8C00">__str__()</font> ，这里不多赘述。</em><br>抛出异常 <font color="#FF8C00">raise</font> ，有唯一指定参数——异常的实例或类。</p><blockquote><p>问题来了，为什么需要抛出异常呢？有时是对异常进行一定处理后再次扔出，一般的考虑是只想确定是否会抛出异常，或者抛出后还有处理。然而有时候还会和用户自定义异常结合使用，这时候就凸显出其功能。</p></blockquote><p><font color="#FF8C00">用户自定义异常</font>。还记得之前提到过在Python中所有的异常都必须是从 BaseException 派生的类的实例，而这里要强调的是<font color="#1E90FF#DC143C">用户自定义的异常并不是从这个基类直接派生的，而是从 Exception 直接继承或间接继承的，尽管 Exception 是从 BaseException 继承来的。</font><br>最后也就是<font color="#FF8C00">finally</font>，它可以让操作者定义一个清洗行为，finally 子句 总会在离开 try 语句前被执行，无论是否发生了异常。当在 try 子句中发生了异常且尚未被 except 子句处理（或者它发生在 except 或 else 子句中）时，它将在 finally 子句执行后被重新抛出。 当 try 语句的任何其他子句通过 break, continue 或 return 语句离开时，finally 也会在“离开之前”被执行。</p><blockquote><p>在实际应用程序中，finally子句对于释放外部资源（例如文件或者网络连接）非常有用，无论是否成功使用资源。</p></blockquote><p>短暂的介绍只是为了简单回顾和把各个关键词的价值所在指出。</p><h2 id="接下来介绍两种异常处理的基本模型。"><a href="#接下来介绍两种异常处理的基本模型。" class="headerlink" title="接下来介绍两种异常处理的基本模型。"></a>接下来介绍两种异常处理的基本模型。</h2><p><em>第一种为中止模型，另一种为继续模型，或称恢复模型。实际使用方面我们对中止模型用的比较多，这个模型比较实用，而继续模型则不是那么的应用普遍。</em></p><ul><li>中止模型 ：<br>假设错误非常严重，已至你无法在回到错误发生的地方，也就是说，这段程序经过判断认为，他已经没有办法挽回，于是就抛出异常。</li><li><p>继续模型：<br>这种模型的主旨是恢复当前的运行环境，然后希望能够重新回到错误的发生地，并希望第二次的尝试能够获得成功，这种模型通常为操作系统所应用。</p><blockquote><p>虽然恢复模型开始显得很吸引人，并且人们使用的操作系统也支持恢复模型的异常处理,但程序员们最终还是转向了使用类似”终止模型”的代码。因为：处理程序必须关注异常抛出的地点，这势必要包含依赖于抛出位置的非通用性代码。这增加了代码编写和维护的困难，对于异常可能会从许多地方抛出的大型程序来说，更是如此。</p></blockquote><p>完</p></li></ul><hr><p>本文的理想受众不是那些对异常处理毫无认知的人群，而是有初步了解且至少做过一些实践哪怕几行的小程序的这类人，用于更深入的思考和理解一些本质问题，而不是受限于语法句式的细节问题，因而未曾加入代码片段。如需大量代码段，推荐阅读<a href="https://docs.python.org/3/tutorial/errors.html" target="_blank" rel="noopener">官方文档</a>。相比于语法规范和语言特性，本文更集中于思考”定义、概念、存在“的价值，加入了不少主观的感受和理解，如有异议、疑惑欢迎讨论，有错误也欢迎斧正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;引言：每当人们接触事物时不免产生对其基本概念的哲学思考。也许对人来讲，一句简单的“我是谁？”就足足困扰了哲学家千年，但面对计算机，有些问题却显得容易回答得多了。曾听闻一个观点，研究自然科学是相当困难的，因为对象是自然界，是通过既有的方法与认知对现象进行解读，是在未知
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博客创建问题及解决摘要</title>
    <link href="http://yoursite.com/2019/01/02/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%91%98%E8%A6%81/"/>
    <id>http://yoursite.com/2019/01/02/博客创建问题及解决摘要/</id>
    <published>2019-01-02T14:56:41.000Z</published>
    <updated>2019-08-07T11:42:20.786Z</updated>
    
    <content type="html"><![CDATA[<p>以下为本博客创建时所遇到的一些疑难问题与所关注过的注意事项，对其有详细解答。中途还会介绍涉及到的部分零碎知识。如有描述不准，望海涵斧正。<a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">(参考的安装教程)</a></p><h1 id="一、Node-js-amp-Github环境搭建"><a href="#一、Node-js-amp-Github环境搭建" class="headerlink" title="一、Node.js &amp; Github环境搭建"></a>一、Node.js &amp; Github环境搭建</h1><h5 id="①、下载安装时避免将两个环境置入同一个文件夹"><a href="#①、下载安装时避免将两个环境置入同一个文件夹" class="headerlink" title="①、下载安装时避免将两个环境置入同一个文件夹"></a>①、下载安装时避免将两个环境置入同一个文件夹</h5><h5 id="②、创建Github项目时以“账户名-github-io”为格式"><a href="#②、创建Github项目时以“账户名-github-io”为格式" class="headerlink" title="②、创建Github项目时以“账户名.github.io”为格式"></a>②、创建Github项目时以“账户名.github.io”为格式</h5><h2 id="———————-进入正题———————"><a href="#———————-进入正题———————" class="headerlink" title="———————-进入正题———————-"></a>———————-<em>进入正题</em>———————-</h2><p><del>这里出现问题比较多，需要重点关注</del></p><h1 id="二、安装hexo"><a href="#二、安装hexo" class="headerlink" title="二、安装hexo"></a>二、<strong>安装hexo</strong></h1><h3 id="1、使用npm安装Github"><a href="#1、使用npm安装Github" class="headerlink" title="1、使用npm安装Github"></a>1、使用npm安装Github</h3><p><strong><em>问题Ⅰ：</em></strong>首次用npm安装Github时，一段进度条会一直无法“前进”，安装进度停滞不前。<br><strong>剖析：</strong>首先，简单介绍一下npm。</p><blockquote><p>npm是随同NodeJS一起安装的包(package)管理工具，能解决NodeJS代码部署上的很多问题。<br>它由三个独立的部分组成：</p><ul><li>网站</li><li>注册表(registry)</li><li>命令行工具(CLI)<br>由于众所周知的原因，国内访问外国网站时一直不怎么流畅，就此问题而言，比起搭梯子，一个淘宝镜像来的更方便快捷。:D<br>那么接下来就是讲一下镜像了。<br>镜像是冗余的一种类型，一个磁盘上的数据在另一个磁盘上存在一个完全相同的副本即为镜像。<br>根据这个描述，可以知道这个淘宝NPM镜像（可以从网络轻松获得，复制停滞进度条前的代码百度即可）是用来替代官方版本的完整镜像，可以完美解决此问题。<br>附上镜像：<code>npm config set registry https://registry.npm.taobao.org</code>  （退出原有的控制台，再次进入安装hexo的文件夹中，直接在命令行中输入即可）<h3 id="2、关联hexo和Github-page"><a href="#2、关联hexo和Github-page" class="headerlink" title="2、关联hexo和Github page"></a>2、关联hexo和Github page</h3><strong><em>问题Ⅱ：</em></strong><font color="#9932CC"> .ssh </font>文件夹及涉及问题<br><strong>具体描述及解决措施：</strong></li><li>①描述：在Git Bash的命令框中输入<code>cd ~/.ssh</code>时，反馈没有此文件夹。<br>解决方案：正常现象，可以继续教程的下一步，系统会自动创建.ssh文件夹。<br>即输入<code>ssh-keygen -t rsa -C “your email address”</code> <font color="#DC143C">(所有指令中注意空格不可略、不可多)</font><br>然后就没什么多说的了，回车就完事了。这时<font color="#9932CC"> .ssh </font>文件夹中会出现两个文件，一个是公钥一个是私钥。这就牵扯到密码学的RSA加密算法<del>在前面输入指令中出现过</del>。简单来说公钥是可公开信息，而私钥是你自己保管。通过一系列算法保证信息安全性。因为对极大整数做因数分解的难度决定了RSA算法的可靠性（不是简单入门的素数判断哦）穷举可破解，但时间得不偿失😊。</li><li>②描述：在hexo文件夹中，找到_config.yml文件并修改时需要注意的事项。<br>  第一这类文件对格式要求即为严格，<font color="#DC143C"> 每个冒号后必须要使用一个空格 </font>，对它的修改在后来配置自己博客时经常出现，所以需要牢记。不然本地检测会报错。<br><img src="..\images\error.jpg" alt="错误实例" title="从朋友那爬了一张图"><br>  第二修改时会有一项<code>repository:</code>     注意使用的是github上项目的SSH不是HTTP！不是HTTP！<del>没有第三遍</del></li></ul></blockquote><p>至此基本总结结束，后续也许会修改</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下为本博客创建时所遇到的一些疑难问题与所关注过的注意事项，对其有详细解答。中途还会介绍涉及到的部分零碎知识。如有描述不准，望海涵斧正。&lt;a href=&quot;https://www.cnblogs.com/fengxiongZz/p/7707219.html&quot; target=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>First post</title>
    <link href="http://yoursite.com/2018/12/30/First%20post/"/>
    <id>http://yoursite.com/2018/12/30/First post/</id>
    <published>2018-12-30T05:32:01.000Z</published>
    <updated>2019-08-07T12:15:47.182Z</updated>
    
    <content type="html"><![CDATA[<p> I know it seems like the world is crumbling out there,but it is actually a great time in your life to get a little crazy. Follow your curiosity,and be ambitious about it. Don’t give up your dreams. The world needs you all!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; I know it seems like the world is crumbling out there,but it is actually a great time in your life to get a little crazy. Follow your cu
      
    
    </summary>
    
    
  </entry>
  
</feed>
